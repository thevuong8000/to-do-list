{"version":3,"sources":["logo.svg","Card.js","EmptyWorkload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","text","onClick","className","class","EmptyWorkload","App","initialState","window","localStorage","getItem","JSON","parse","useState","toDoList","setToDoList","adding","setAdding","normalize","document","querySelector","style","opacity","getElementById","display","id","type","placeholder","autofocus","onKeyPress","event","key","todo","includes","alert","newList","push","setItem","stringify","value","add_todo","target","console","log","focus","length","map","toDo","e","innerHTML","idx","indexOf","splice","remove_todo","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,yNCe5BC,MAXf,YAAkC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAClB,OACI,yBAAKC,UAAU,QACX,yBAAKC,MAAM,aACP,kBAAC,IAAD,CAAkBD,UAAU,cAC5B,0BAAMA,UAAU,YAAYD,QAASA,GAAUD,M,yBCQhDI,MAbf,WACI,OACI,yBAAKF,UAAU,QACX,yBAAKC,MAAM,wBACP,8BACI,kBAAC,IAAD,CAAwBD,UAAU,cADtC,gCC8EDG,MA/Ef,WAEC,IAAIC,EAAeC,OAAOC,aAAaC,QAAQ,QAC1CC,KAAKC,MAAMJ,OAAOC,aAAaC,QAAQ,SAAW,GAHzC,EAIkBG,mBAASN,GAJ3B,mBAIPO,EAJO,KAIGC,EAJH,OAKcF,oBAAS,GALvB,mBAKPG,EALO,KAKCC,EALD,KAoCRC,EAAY,WACjBD,GAAU,GACVE,SAASC,cAAc,QAAQC,MAAMC,QAAU,EAC/CH,SAASI,eAAe,YAAYF,MAAMG,QAAU,QAGrD,OACC,6BACC,2BACCC,GAAG,WACHrB,MAAM,eACNsB,KAAK,OACLC,YAAY,qBACZC,WAAS,EACTC,WAAY,SAACC,GACK,UAAdA,EAAMC,KAnCI,SAACC,GACjB,GAAGlB,EAASmB,SAASD,GACpBE,MAAM,yCACD,CAEL,IAAIC,EAAO,YAAOrB,GAClBqB,EAAQC,KAAKJ,GACbxB,OAAOC,aAAa4B,QAAQ,OAAQ1B,KAAK2B,UAAUH,IACnDpB,EAAYoB,GAEbhB,SAASI,eAAe,YAAYgB,MAAQ,GAC5CrB,IAyBIsB,CAASV,EAAMW,OAAOF,UAKzB,yBAAKpC,UAAU,MAAMD,QAAS,WAC7BwC,QAAQC,IAAI,oBACT3B,GACFE,MAGD,wBAAIf,UAAU,SAAd,cACA,yBAAKA,UAAU,cACd,6BACC,4BAAQD,QApCY,WACxBe,GAAU,GACVE,SAASC,cAAc,QAAQC,MAAMC,QAAU,GAC/CH,SAASI,eAAe,YAAYF,MAAMG,QAAU,QACpDL,SAASI,eAAe,YAAYqB,SAgCGnB,GAAG,UAAUC,KAAK,SAAStB,MAAM,mBAAkB,kBAAC,IAAD,MAAtF,QAED,yBAAKD,UAAU,UACM,IAApBW,EAAS+B,QAAiB,kBAAC,EAAD,MAC1B/B,EAASgC,KAAI,SAAAC,GAAI,OACjB,kBAAC,EAAD,CAAM9C,KAAM8C,EAAM7C,QAAS,SAAA8C,GAAC,OAhEb,SAAClB,GACpB,IAAME,EAAOF,EAAMW,OAAOQ,UACtBC,EAAMpC,EAASqC,QAAQnB,GAEvBG,EAAO,YAAOrB,GAClBqB,EAAQiB,OAAOF,EAAK,GACpB1C,OAAOC,aAAa4B,QAAQ,OAAQ1B,KAAK2B,UAAUH,IACnDpB,EAAYoB,GAyDwBkB,CAAYL,aClE9BM,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAASI,eAAe,SDyHpB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.c1705799.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './Card.css'\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\n\r\nfunction Card({ text, onClick }) {\r\n    return (\r\n        <div className='card'>\r\n            <div class=\"card-body\">\r\n                <HighlightOffIcon className='card_icon'></HighlightOffIcon>\r\n                <span className='card_text' onClick={onClick}>{text}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport './EmptyWorkload.css'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\n\r\nfunction EmptyWorkload() {\r\n    return (\r\n        <div className='card'>\r\n            <div class=\"card-body empty_work\">\r\n                <span>\r\n                    <CheckCircleOutlineIcon className='done_icon'></CheckCircleOutlineIcon>\r\n                    You have no work to do!!!\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmptyWorkload\r\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AddIcon from '@material-ui/icons/Add';\nimport Card from './Card'\nimport EmptyWorkload from './EmptyWorkload';\n\nfunction App() {\n\t// console.log(window.localStorage.getItem('list'))\n\tvar initialState = window.localStorage.getItem('list') ? \n\t\t\t\t\t\tJSON.parse(window.localStorage.getItem('list')) : []\n\tconst [toDoList, setToDoList] = useState(initialState);\n\tconst [adding, setAdding] = useState(false)\n\t\n\tconst remove_todo = (event) => {\n\t\tconst todo = event.target.innerHTML;\n\t\tvar idx = toDoList.indexOf(todo);\n\t\t// console.log(idx);\n\t\tvar newList = [...toDoList];\n\t\tnewList.splice(idx, 1);\n\t\twindow.localStorage.setItem('list', JSON.stringify(newList));\n\t\tsetToDoList(newList);\n\t}\n\tconst add_todo = (todo) => {\n\t\tif(toDoList.includes(todo)){\n\t\t\talert('This work has been already added!')\n\t\t} else{\n\t\t\t// console.log(\"add item\")\n\t\t\tvar newList = [...toDoList];\n\t\t\tnewList.push(todo);\n\t\t\twindow.localStorage.setItem('list', JSON.stringify(newList));\n\t\t\tsetToDoList(newList)\n\t\t}\n\t\tdocument.getElementById('add_work').value = '';\n\t\tnormalize()\n\t}\n\n\tconst make_transparent = () => {\n\t\tsetAdding(true);\n\t\tdocument.querySelector('.app').style.opacity = 0.5;\n\t\tdocument.getElementById('add_work').style.display = 'block';\n\t\tdocument.getElementById('add_work').focus();\n\t}\n\tconst normalize = () => {\n\t\tsetAdding(false);\n\t\tdocument.querySelector('.app').style.opacity = 1;\n\t\tdocument.getElementById('add_work').style.display = 'none';\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<input \n\t\t\t\tid='add_work' \n\t\t\t\tclass=\"form-control\" \n\t\t\t\ttype=\"text\" \n\t\t\t\tplaceholder=\"Add new workâ€¦\"\n\t\t\t\tautofocus\n\t\t\t\tonKeyPress={(event) => {\n\t\t\t\t\tif(event.key === 'Enter'){\n\t\t\t\t\t\tadd_todo(event.target.value);\n\t\t\t\t\t}\n\t\t\t\t}} \n\t\t\t/>\n\t\t\t\n\t\t\t<div className=\"app\" onClick={() => {\n\t\t\t\tconsole.log(\"try to normalize\")\n\t\t\t\tif(adding){\n\t\t\t\t\tnormalize()\n\t\t\t\t}\n\t\t\t}}>\n\t\t\t\t<h1 className='title'>To Do List</h1>\n\t\t\t\t<div className='to_do_list'>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button onClick={make_transparent} id='add_btn' type=\"button\" class=\"btn btn-primary\"><AddIcon></AddIcon>New</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='clear'></div>\n\t\t\t\t\t{toDoList.length === 0 && (<EmptyWorkload></EmptyWorkload>)}\n\t\t\t\t\t{toDoList.map(toDo => (\n\t\t\t\t\t\t<Card text={toDo} onClick={e => remove_todo(e)}></Card>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}